import re
import pyfiglet
from colorama import init, Fore
from datetime import datetime
import logging

class InputValidator:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.INFO)

        handler = logging.FileHandler('input_validator.log')
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        self.logger.addHandler(handler)
        self.logger.info('InputValidator initialized')

   #lab3

    def __init__(self):
        init(autoreset=True)

    @staticmethod
    def contains_ukrainian(text):
        return any(char in "абвгґдеєжзиіїйклмнопрстуфхцчшщьюя" for char in text.lower())

    def available_fonts(self):
        return pyfiglet.FigletFont.getFonts()

    def available_colors(self):
        return ['grey', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan', 'white']

    def generate(self, text, font):
        return pyfiglet.figlet_format(text, font=font)

    def colorize(self, text, color):
        color_map = {
            'grey': Fore.LIGHTBLACK_EX,
            'red': Fore.RED,
            'green': Fore.GREEN,
            'yellow': Fore.YELLOW,
            'blue': Fore.BLUE,
            'magenta': Fore.MAGENTA,
            'cyan': Fore.CYAN,
            'white': Fore.LIGHTWHITE_EX
        }
        return color_map[color] + text

    def save(self, ascii_art):
        with open('ascii_art.txt', 'w') as file:
            file.write(ascii_art)

    @staticmethod
    def resize(ascii_art, width_multiplier, height_multiplier):
        lines = ascii_art.split("\n")
        new_lines = []

        for line in lines:
            new_line = "".join([char * width_multiplier for char in line])
            for _ in range(height_multiplier):
                new_lines.append(new_line)

        return "\n".join(new_lines)

#lab4

    ascii_art_alphabet = {
        'A': [" @@@@ ", "@    @", "@@@@@@", "@    @", "@    @"],
        'B': ["@@@@ ", "@   @", "@@@@ ", "@   @", "@@@@ "],
        'C': [" @@@@", "@    ", "@    ", "@    ", " @@@@"],
        'D': ["@@@@ ", "@   @", "@   @", "@   @", "@@@@ "],
        'E': ["@@@@@", "@    ", "@@@@ ", "@    ", "@@@@@"],
        'F': ["@@@@@", "@    ", "@@@@ ", "@    ", "@"],
        'G': [" @@@@", "@    ", "@  @@", "@   @", " @@@@"],
        'H': ["@   @", "@   @", "@@@@@", "@   @", "@   @"],
        'I': [" @@@ ", "  @  ", "  @  ", "  @  ", " @@@ "],
        'J': ["   @@", "   @ ", "   @ ", "@  @ ", " @@  "],
        'K': ["@   @", "@  @ ", "@@   ", "@  @ ", "@   @"],
        'L': ["@    ", "@    ", "@    ", "@    ", "@@@@@"],
        'M': ["@   @", "@@ @@", "@ @ @", "@   @", "@   @"],
        'N': ["@   @", "@@  @", "@ @ @", "@  @@", "@   @"],
        'O': [" @@@ ", "@   @", "@   @", "@   @", " @@@ "],
        'P': ["@@@@ ", "@   @", "@@@@ ", "@    ", "@    "],
        'Q': [" @@@ ", "@   @", "@ @ @", "@  @ ", " @@ @"],
        'R': ["@@@@ ", "@   @", "@@@@ ", "@  @ ", "@   @"],
        'S': [" @@@@", "@    ", " @@@ ", "    @", "@@@@ "],
        'T': ["@@@@@", "  @  ", "  @  ", "  @  ", "  @  "],
        'U': ["@   @", "@   @", "@   @", "@   @", " @@@ "],
        'V': ["@   @", "@   @", "@   @", " @ @ ", "  @  "],
        'W': ["@   @", "@   @", "@ @ @", "@@ @@", "@   @"],
        'X': ["@   @", " @ @ ", "  @  ", " @ @ ", "@   @"],
        'Y': ["@   @", " @ @ ", "  @  ", "  @  ", "  @  "],
        'Z': ["@@@@@", "   @ ", "  @  ", " @   ", "@@@@@"],
        'a': ["  @@@  ", " @   @ ", "@     @", "@@@@@@", "@     @"],
        'b': ["@@@@  ", "@   @ ", "@@@@  ", "@   @ ", "@@@@  "],
        'c': [" @@@@ ", "@    ", "@    ", "@    ", " @@@@"],
        'd': ["@@@@ ", "@   @", "@   @", "@   @", "@@@@ "],
        'e': ["@@@@@", "@    ", "@@@@ ", "@    ", "@@@@@"],
        'f': ["@@@@@", "@    ", "@@@@ ", "@    ", "@"],
        'g': [" @@@@", "@    ", "@  @@", "@   @", " @@@@"],
        'h': ["@   @", "@   @", "@@@@@", "@   @", "@   @"],
        'i': [" @@@ ", "  @  ", "  @  ", "  @  ", " @@@ "],
        'j': ["   @@", "   @ ", "   @ ", "@  @ ", " @@  "],
        'k': ["@   @", "@  @ ", "@@   ", "@  @ ", "@   @"],
        'l': ["@    ", "@    ", "@    ", "@    ", "@@@@@"],
        'm': ["@   @", "@@ @@", "@ @ @", "@   @", "@   @"],
        'n': ["@   @", "@@  @", "@ @ @", "@  @@", "@   @"],
        'o': [" @@@ ", "@   @", "@   @", "@   @", " @@@ "],
        'p': ["@@@@ ", "@   @", "@@@@ ", "@    ", "@    "],
        'q': [" @@@ ", "@   @", "@ @ @", "@  @ ", " @@ @"],
        'r': ["@@@@ ", "@   @", "@@@@ ", "@  @ ", "@   @"],
        's': [" @@@@", "@    ", " @@@ ", "    @", "@@@@ "],
        't': ["@@@@@", "  @  ", "  @  ", "  @  ", "  @  "],
        'u': ["@   @", "@   @", "@   @", "@   @", " @@@ "],
        'v': ["@   @", "@   @", "@   @", " @ @ ", "  @  "],
        'w': ["@   @", "@   @", "@ @ @", "@@ @@", "@   @"],
        'x': ["@   @", " @ @ ", "  @  ", " @ @ ", "@   @"],
        'y': ["@   @", " @ @ ", "  @  ", "  @  ", "  @  "],
        'z': ["@@@@@", "   @ ", "  @  ", " @   ", "@@@@@"],
        # Symbols
        '!': ["  @  ", "  @  ", "  @  ", "     ", "  @  "],
        '@': [" @@@@ ", "@    @", "@ @@@@", "@ @@@ ", "@    "],
        '#': [" @ @ ", "@@@@@", " @ @ ", "@@@@@", " @ @ "],
        '$': ["  @$@ ", "@$   ", " @$@ ", "   $@", " @$@ "],
        '%': ["@   @", "   @ ", "  @  ", " @   ", "@   @"],
        '^': ["  @  ", " @ @ ", "@   @", "     ", "     "],
        '&': [" @   ", "@  @ ", " @ @ ", "@  @@", " @@ @"],
        '*': ["     ", "@ @ @", " @@@ ", "@ @ @", "     "],
        '(': ["  @  ", " @   ", "@    ", " @   ", "  @  "],
        ')': ["  @  ", "   @ ", "    @", "   @ ", "  @  "],
        '-': ["     ", "     ", " @@@ ", "     ", "     "],
        '+': ["     ", "  @  ", "@@@@@", "  @  ", "     "],
        '=': ["     ", "@@@@@", "     ", "@@@@@", "     "],
        '[': [" @@@ ", " @   ", " @   ", " @   ", " @@@ "],
        ']': [" @@@ ", "   @ ", "   @ ", "   @ ", " @@@ "],
        '{': ["   @@ ", "  @   ", "@@    ", "  @   ", "   @@ "],
        '}': ["@@    ", "   @  ", "    @@", "   @  ", "@@    "],
        '|': ["  @  ", "  @  ", "  @  ", "  @  ", "  @  "],
        '\\': ["@     ", " @    ", "  @   ", "   @  ", "    @"],
        '/': ["    @ ", "   @  ", "  @   ", " @    ", "@     "],
        '<': ["   @ ", "  @  ", "@    ", "  @  ", "   @ "],
        '>': [" @   ", "  @  ", "    @", "  @  ", " @   "],
        '?': [" @@@ ", "@   @", "   @ ", "     ", "  @  "],
        '"': ["@ @ ", "@ @ ", "    ", "    ", "    "],
        "'": ["  @  ", " @   ", "     ", "     ", "     "],
        '`': ["  @  ", "   @ ", "     ", "     ", "     "],
        '~': ["     ", " @  @", "@  @ ", "     ", "     "],
        '_': ["     ", "     ", "     ", "     ", "@@@@@"],
        ':': ["     ", "  @  ", "     ", "  @  ", "     "],
        ';': ["  @  ", "     ", "  @  ", "   @ ", "@    "],
        ',': ["     ", "     ", "  @  ", "   @ ", "@    "],
        '.': ["     ", "     ", "     ", "  @  ", "     "],
        '/': ["    @", "   @ ", "  @  ", " @   ", "@    "],
        '0': [" @@@ ", "@   @", "@   @", "@   @", " @@@ "],
        '1': ["  @  ", " @@  ", "  @  ", "  @  ", "@@@@@"],
        '2': [" @@@ ", "@   @", "   @ ", "  @  ", "@@@@@"],
        '3': [" @@@@", "    @", "  @@ ", "    @", "@@@@ "],
        '4': ["   @ ", "  @@ ", " @ @ ", "@@@@@", "   @ "],
        '5': ["@@@@@", "@    ", "@@@@ ", "    @", "@@@@ "],
        '6': ["  @@@ ", " @    ", "@@@@  ", "@   @ ", " @@@  "],
        '7': ["@@@@@", "    @", "   @ ", "  @  ", " @   "],
        '8': [" @@@ ", "@   @", " @@@ ", "@   @", " @@@ "],
        '9': [" @@@ ", "@   @", " @@@@", "    @", " @@@ "]

    }

    ascii_art_ukrainian_alphabet = {
        'А': [" @@@@ ", "@    @", "@@@@@@", "@    @", "@    @"],
        'Б': ["@@@@@ ", "@    ", "@@@@ ", "@    @", "@@@@ "],
        'В': ["@@@@ ", "@   @", "@@@@ ", "@   @", "@@@@ "],
        'Г': ["@@@@@", "@    ", "@    ", "@    ", "@    "],
        'Ґ': ["@@@@@", "@    ", "@@@@@", "@    ", "@    "],
        'Д': ["  @@@@", " @  @ ", "@   @", "@   @", "@@@@@"],
        'Е': ["@@@@@", "@    ", "@@@@ ", "@    ", "@@@@@"],
        'Є': [" @@@@", "@    ", "@@@@ ", "@   @", " @@@@"],
        'Ж': ["@ @ @", " @ @ ", "  @  ", " @ @ ", "@ @ @"],
        'З': [" @@@@", "@    ", "  @@ ", "    @", "@@@@ "],
        'И': ["@   @", "@  @@", "@ @ @", "@@  @", "@   @"],
        'І': [" @@@ ", "  @  ", "  @  ", "  @  ", " @@@ "],
        'Ї': ["@ @ @", "     ", " @@@ ", "  @  ", " @@@ "],
        'Й': [" @ @ ", "     ", "@   @", "@  @@", "@ @ @"],
        'К': ["@   @", "@  @ ", "@@   ", "@  @ ", "@   @"],
        'Л': ["  @@@@", " @   @", "@    @", "@    @", "@    @"],
        'М': ["@   @", "@@ @@", "@ @ @", "@   @", "@   @"],
        'Н': ["@   @", "@   @", "@@@@@", "@   @", "@   @"],
        'О': [" @@@ ", "@   @", "@   @", "@   @", " @@@ "],
        'П': ["@@@@@", "@   @", "@   @", "@   @", "@   @"],
        'Р': ["@@@@ ", "@   @", "@@@@ ", "@    ", "@    "],
        'С': [" @@@@", "@    ", "@    ", "@    ", " @@@@"],
        'Т': ["@@@@@", "  @  ", "  @  ", "  @  ", "  @  "],
        'У': ["@   @", "@   @", " @@@ ", "  @  ", "@@   "],
        'Ф': [" @@@ ", "@ @ @", " @@@ ", "  @  ", "  @  "],
        'Х': ["@   @", " @ @ ", "  @  ", " @ @ ", "@   @"],
        'Ц': ["@   @", "@   @", "@   @", "@@@@@", "    @"],
        'Ч': ["@   @", "@   @", " @@@@", "    @", "    @"],
        'Ш': ["@ @ @", "@ @ @", "@ @ @", "@ @ @", "@@@@@"],
        'Щ': ["@ @ @", "@ @ @", "@ @ @", "@@@@@", "    @"],
        'Ь': ["@    ", "@    ", "@@@@ ", "@   @", "@@@@ "],
        'Ю': ["@ @@ ", "@ @ @", "@@@ @", "@ @ @", "@ @@ "],
        'Я': [" @@@@", "@   @", " @@@@", " @  @", "@   @"],
        # Lowercase Ukrainian letters
        'а': ["  @@@  ", " @   @ ", "@     @", "@     @", " @@@@@ "],
        'б': [" @@@@@ ", "@     ", "@@@@@ ", "@    @", "@@@@@ "],
        'в': ["@@@@  ", "@   @ ", "@@@@  ", "@   @ ", "@@@@  "],
        'г': ["@@@@@", "@    ", "@    ", "@    ", "@    "],
        'ґ': ["@@@@@", "@    ", "@@@@ ", "@    ", "@    "],
        'д': ["  @@@@", " @  @ ", "@   @", "@   @", "@@@@@"],
        'е': [" @@@@ ", "@    ", "@@@@ ", "@    ", " @@@@ "],
        'є': ["  @@@@", " @   ", "@@@@ ", "@   @", " @@@@"],
        'ж': ["@ @ @", " @ @ ", "  @  ", " @ @ ", "@ @ @"],
        'з': [" @@@@", "@    ", "  @@ ", "    @", "@@@@ "],
        'и': ["@   @", "@  @@", "@ @ @", "@@  @", "@   @"],
        'і': [" @@@ ", "  @  ", "  @  ", "  @  ", " @@@ "],
        'ї': ["@ @ @", "     ", " @@@ ", "  @  ", " @@@ "],
        'й': [" @ @ ", "     ", "@   @", "@  @@", "@ @ @"],
        'к': ["@   @", "@  @ ", "@@   ", "@  @ ", "@   @"],
        'л': ["  @@@@", " @   @", "@    @", "@    @", "@    @"],
        'м': ["@   @", "@@ @@", "@ @ @", "@   @", "@   @"],
        'н': ["@   @", "@   @", "@@@@@", "@   @", "@   @"],
        'о': [" @@@ ", "@   @", "@   @", "@   @", " @@@ "],
        'п': ["@@@@@", "@   @", "@   @", "@   @", "@   @"],
        'р': ["@@@@ ", "@   @", "@@@@ ", "@    ", "@    "],
        'с': [" @@@@", "@    ", "@    ", "@    ", " @@@@"],
        'т': ["@@@@@", "  @  ", "  @  ", "  @  ", "  @  "],
        'у': ["@   @", "@   @", " @@@ ", "  @  ", "@@   "],
        'ф': [" @@@ ", "@ @ @", " @@@ ", "  @  ", "  @  "],
        'х': ["@   @", " @ @ ", "  @  ", " @ @ ", "@   @"],
        'ц': ["@   @", "@   @", "@   @", "@@@@@", "    @"],
        'ч': ["@   @", "@   @", " @@@@", "    @", "    @"],
        'ш': ["@ @ @", "@ @ @", "@ @ @", "@ @ @", "@@@@@"],
        'щ': ["@ @ @", "@ @ @", "@ @ @", "@@@@@", "    @"],
        'ь': ["@    ", "@    ", "@@@@ ", "@   @", "@@@@ "],
        'ю': ["@ @@ ", "@ @ @", "@@@ @", "@ @ @", "@ @@ "],
        'я': [" @@@@", "@   @", " @@@@", " @  @", "@   @"],
        '!': ["  @  ", "  @  ", "  @  ", "     ", "  @  "],
        '@': [" @@@@ ", "@    @", "@ @@@@", "@ @@@ ", "@    "],
        '#': [" @ @ ", "@@@@@", " @ @ ", "@@@@@", " @ @ "],
        '$': ["  @$@ ", "@$   ", " @$@ ", "   $@", " @$@ "],
        '%': ["@   @", "   @ ", "  @  ", " @   ", "@   @"],
        '^': ["  @  ", " @ @ ", "@   @", "     ", "     "],
        '&': [" @   ", "@  @ ", " @ @ ", "@  @@", " @@ @"],
        '*': ["     ", "@ @ @", " @@@ ", "@ @ @", "     "],
        '(': ["  @  ", " @   ", "@    ", " @   ", "  @  "],
        ')': ["  @  ", "   @ ", "    @", "   @ ", "  @  "],
        '-': ["     ", "     ", " @@@ ", "     ", "     "],
        '+': ["     ", "  @  ", "@@@@@", "  @  ", "     "],
        '=': ["     ", "@@@@@", "     ", "@@@@@", "     "],
        '[': [" @@@ ", " @   ", " @   ", " @   ", " @@@ "],
        ']': [" @@@ ", "   @ ", "   @ ", "   @ ", " @@@ "],
        '{': ["   @@ ", "  @   ", "@@    ", "  @   ", "   @@ "],
        '}': ["@@    ", "   @  ", "    @@", "   @  ", "@@    "],
        '|': ["  @  ", "  @  ", "  @  ", "  @  ", "  @  "],
        '\\': ["@     ", " @    ", "  @   ", "   @  ", "    @"],
        '/': ["    @ ", "   @  ", "  @   ", " @    ", "@     "],
        '<': ["   @ ", "  @  ", "@    ", "  @  ", "   @ "],
        '>': [" @   ", "  @  ", "    @", "  @  ", " @   "],
        '?': [" @@@ ", "@   @", "   @ ", "     ", "  @  "],
        '"': ["@ @ ", "@ @ ", "    ", "    ", "    "],
        "'": ["  @  ", " @   ", "     ", "     ", "     "],
        '`': ["  @  ", "   @ ", "     ", "     ", "     "],
        '~': ["     ", " @  @", "@  @ ", "     ", "     "],
        '_': ["     ", "     ", "     ", "     ", "@@@@@"],
        ':': ["     ", "  @  ", "     ", "  @  ", "     "],
        ';': ["  @  ", "     ", "  @  ", "   @ ", "@    "],
        ',': ["     ", "     ", "  @  ", "   @ ", "@    "],
        '.': ["     ", "     ", "     ", "  @  ", "     "],
        '/': ["    @", "   @ ", "  @  ", " @   ", "@    "],
        '0': [" @@@ ", "@   @", "@   @", "@   @", " @@@ "],
        '1': ["  @  ", " @@  ", "  @  ", "  @  ", "@@@@@"],
        '2': [" @@@ ", "@   @", "   @ ", "  @  ", "@@@@@"],
        '3': [" @@@@", "    @", "  @@ ", "    @", "@@@@ "],
        '4': ["   @ ", "  @@ ", " @ @ ", "@@@@@", "   @ "],
        '5': ["@@@@@", "@    ", "@@@@ ", "    @", "@@@@ "],
        '6': ["  @@@ ", " @    ", "@@@@  ", "@   @ ", " @@@  "],
        '7': ["@@@@@", "    @", "   @ ", "  @  ", " @   "],
        '8': [" @@@ ", "@   @", " @@@ ", "@   @", " @@@ "],
        '9': [" @@@ ", "@   @", " @@@@", "    @", " @@@ "]

    }

    @staticmethod
    def get_ascii_art(letter, language='english'):
        if language == 'ukrainian':
            return Alphabet.ascii_art_ukrainian_alphabet.get(letter.upper())
        else:
            return Alphabet.ascii_art_alphabet.get(letter.upper())

#lab7

    @staticmethod
    def validate_number(input_str):
        """Checks if the input string is a positive integer."""
        try:
            number = int(input_str)
            if number > 0:
                logging.info(f"Valid number: {number}")
                return number
            else:
                logging.error(f"Number must be greater than 0: {input_str}")
                raise ValueError("The number must be greater than 0.")
        except ValueError:
            logging.error(f"Invalid input for number: {input_str}")
            return None

    @staticmethod
    def validate_display_format(input_str):
        """Checks if the input display format is valid (either '1' or '2')."""
        if input_str in ['1', '2']:
            logging.info(f"Valid display format: {input_str}")
            return input_str
        else:
            logging.error(f"Invalid display format: {input_str}")
            return None

    @staticmethod
    def validate_date(input_str):
        """Checks if the input is a valid date in the format DD-MM-YYYY."""
        try:
            datetime.strptime(input_str, '%d-%m-%Y')
            logging.info(f"Valid date format: {input_str}")
            return input_str
        except ValueError:
            logging.warning(f"Invalid date format: {input_str}")
            return None

    @staticmethod
    def validate_phone_number(input_str):
        """Checks if the input is a valid phone number."""
        pattern = r'\+?\d{1,3}?[-.\s]?\(?\d{2,3}\)?[-.\s]?\d{3}[-.\s]?\d{4}'
        if re.match(pattern, input_str):
            logging.info(f"Valid phone number: {input_str}")
            return input_str
        else:
            logging.warning(f"Invalid phone number: {input_str}")
            return None